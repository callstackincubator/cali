diff --git a/dist/index.d.ts b/dist/index.d.ts
index 6d9d7ffa9c78b51a208a04189d842186a34e78cd..24aede8005b530445fb0788fefe53d98bd9ab2fc 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -1558,6 +1558,10 @@ changing the tool call and result types in the result.
      */
     experimental_activeTools?: Array<keyof TOOLS>;
     /**
+    Callback that is called when each step (LLM call) is started
+     */
+    onStepStart?: (toolCalls: ToolCallArray<TOOLS>) => Promise<void> | void;
+    /**
     Callback that is called when each step (LLM call) is finished, including intermediate steps.
     */
     onStepFinish?: (event: StepResult<TOOLS>) => Promise<void> | void;
diff --git a/dist/index.js b/dist/index.js
index f8002b76aae8e7b915b7a16b3c9ff68063e9e78a..dff50cb864846302688f22ea8aa68965601b4144 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -3264,6 +3264,7 @@ async function generateText({
     currentDate = () => /* @__PURE__ */ new Date()
   } = {},
   onStepFinish,
+  onStepStart,
   ...settings
 }) {
   if (maxSteps < 1) {
@@ -3424,6 +3425,7 @@ async function generateText({
         currentToolCalls = ((_a11 = currentModelResponse.toolCalls) != null ? _a11 : []).map(
           (modelToolCall) => parseToolCall({ toolCall: modelToolCall, tools })
         );
+        await (onStepStart == null ? void 0 : onStepStart(currentToolCalls));
         currentToolResults = tools == null ? [] : await executeTools({
           toolCalls: currentToolCalls,
           tools,
diff --git a/dist/index.mjs b/dist/index.mjs
index 667c98e17072b65f29597277a734127f69fdc83b..586f1082a0c4bf21f04af47031b0d41dc4d5c028 100644
--- a/dist/index.mjs
+++ b/dist/index.mjs
@@ -3230,6 +3230,7 @@ async function generateText({
     generateId: generateId3 = originalGenerateId3,
     currentDate = () => /* @__PURE__ */ new Date()
   } = {},
+  onStepStart,
   onStepFinish,
   ...settings
 }) {
@@ -3391,6 +3392,7 @@ async function generateText({
         currentToolCalls = ((_a11 = currentModelResponse.toolCalls) != null ? _a11 : []).map(
           (modelToolCall) => parseToolCall({ toolCall: modelToolCall, tools })
         );
+        await (onStepStart == null ? void 0 : onStepStart(currentToolCalls));
         currentToolResults = tools == null ? [] : await executeTools({
           toolCalls: currentToolCalls,
           tools,
